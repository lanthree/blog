<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>MQ on Engineers Cool</title>
    <link>https://engineers.cool/categories/mq/</link>
    <description>Recent content in MQ on Engineers Cool</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 02 Feb 2022 22:15:17 +0800</lastBuildDate><atom:link href="https://engineers.cool/categories/mq/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>[WIP] Rocketmq</title>
      <link>https://engineers.cool/posts/architecture/mq/rocketmq/</link>
      <pubDate>Wed, 02 Feb 2022 22:15:17 +0800</pubDate>
      
      <guid>https://engineers.cool/posts/architecture/mq/rocketmq/</guid>
      <description>RocketMQ 架构 Doc
单机存储 Failover </description>
    </item>
    
    <item>
      <title>[WIP] MQ</title>
      <link>https://engineers.cool/posts/architecture/mq/mq_comm/</link>
      <pubDate>Wed, 02 Feb 2022 22:15:10 +0800</pubDate>
      
      <guid>https://engineers.cool/posts/architecture/mq/mq_comm/</guid>
      <description>Why MQ？  异步处理 解耦服务 削峰填谷 顺序消息  术语          Producer    Consumer    Topic    MessageQueue/Partition    Broker    Consumer Group    Rebalance    Message ordering     mq选型    MQ 场景 设计目标 CAP 硬件     kafka       NSQ/RocketMQ        RocketMQ vs.</description>
    </item>
    
    <item>
      <title>[WIP] Kafka</title>
      <link>https://engineers.cool/posts/architecture/mq/kafka/</link>
      <pubDate>Wed, 02 Feb 2022 22:15:02 +0800</pubDate>
      
      <guid>https://engineers.cool/posts/architecture/mq/kafka/</guid>
      <description>设计理念  低延迟：时间复杂度O(1) 高吞吐 水平扩展 顺序性：保证每个partition内的消息顺序传输 多场景：支持离线数据和实时数据  架构 Broker（kafka svr）依赖Zookeeper做：
 元数据管理 领导选举  消费是PULL模型：
   消费模型 优点 缺点     PUSH 延迟低 容易怼挂消费者   PULL 削峰效果好：消费者根据处理能力拉数据； 可以批量PULL = 性能更好 延迟相对高    数据
 Record  key - value timestamp   Topic  逻辑概念 发布-订阅均基于Topic   Partition  一个Topic包含一个或多个Partion  均匀分布在多个Broker - 以达到高并行处理能力   每个Partition物理上对应一个文件夹（每一段对应一个Segment，及一个文件）    Producer</description>
    </item>
    
  </channel>
</rss>
