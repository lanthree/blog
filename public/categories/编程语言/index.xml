<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>编程语言 on Engineers Cool</title>
    <link>https://engineers.cool/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/</link>
    <description>Recent content in 编程语言 on Engineers Cool</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 02 Feb 2022 21:49:17 +0800</lastBuildDate><atom:link href="https://engineers.cool/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>[WIP] golang</title>
      <link>https://engineers.cool/posts/stereotype/language/golang/</link>
      <pubDate>Wed, 02 Feb 2022 21:49:17 +0800</pubDate>
      
      <guid>https://engineers.cool/posts/stereotype/language/golang/</guid>
      <description>流程语句 for // Like a C for for init; condition; post { } // Like a C while for condition { } // Like a C for(;;) for { } 遍历容器
for key, value := range oldMap { newMap[key] = value } // 甚至可以遍历字符串 for pos, char := range &amp;#34;日本\x80語&amp;#34; { // \x80 is an illegal UTF-8 encoding  fmt.Printf(&amp;#34;character %#U starts at byte position %d\n&amp;#34;, char, pos) } // print // character U+65E5 &amp;#39;日&amp;#39; starts at byte position 0 // character U+672C &amp;#39;本&amp;#39; starts at byte position 3 // character U+FFFD &amp;#39;�&amp;#39; starts at byte position 6 // character U+8A9E &amp;#39;語&amp;#39; starts at byte position 7  // 只要key for key := range m { if key.</description>
    </item>
    
    <item>
      <title>Effective C&#43;&#43;</title>
      <link>https://engineers.cool/posts/stereotype/language/effective_cpp/</link>
      <pubDate>Wed, 02 Feb 2022 21:49:07 +0800</pubDate>
      
      <guid>https://engineers.cool/posts/stereotype/language/effective_cpp/</guid>
      <description>条款01：视C++为一个语言联邦  C：C++以C为基础，区块（blocks）、语句（statements）、预处理器（preprocessor）、内置数据类型（built-in data types）、数据（arrays）、指针（pointers）等统统来自C。 Object-Oriented C++：这部分也就是C with Classes所诉求的，classes（包括构造函数和析构函数），封装（encapsulation）、继承（inheritance）、多态（polymorphism）、virtual函数（动态绑定）……等等。 Template C++：这是C++的泛型编程（generic programming）部分，它们带来崭新的编程范型（prpgramming paradigm），也就是所谓的template metaprogramming（TMP，模版元编程）。 STL：STL是个template程序库。  请记住：
 C++高效编程守则视状况而变化，取决于你使用C++的哪一部分。  条款02：尽量以const，enum，inline替换#define 以常量替换#define：
 定义常量指针（constant pointers），如果要在头文件内定义一个常量的（不变的）char*-bases字符串，必须写const两次：  const char* const authorName = &amp;quot;Scott Meyers&amp;quot;; 或者写成const std::string authorName(&amp;quot;Scott Meyers&amp;quot;);   class专属常量   // static class 常量声明位于头文件内 class CostEstimate { private: static const double FudgeFactor; ... }; // static class常量定义位于实现文件内 const double CostEstimate::FudgeFactor = 1.35;     enum hack：一个属于枚举类型（enumerated type）的数值可权充ints被使用</description>
    </item>
    
    <item>
      <title>C&#43;&#43;</title>
      <link>https://engineers.cool/posts/stereotype/language/cpp/</link>
      <pubDate>Wed, 02 Feb 2022 21:49:00 +0800</pubDate>
      
      <guid>https://engineers.cool/posts/stereotype/language/cpp/</guid>
      <description>程序编译过程 编译过程分为四个过程：编译（编译预处理、编译、优化），汇编，链接。
 编译预处理：处理以#开头的指令 编译、优化：将源码.cpp文件翻译成.s汇编代码 汇编：将汇编代码.s翻译成机器指令.o文件 链接：汇编程序生成的木匾文件，即.o文件，并不会立即执行，因为可能会出现：.cpp文件中的函数引用了另一个.cpp文件中定义的符号或者调用了某个库文件中的函数。那链接的目的。就是将这些文件对应的目标文件连接成一个整体，从而生成可执行的文件  链接分为两种：
 静态链接：代码从其所在的静态链接库中拷贝到最终的可执行文件中，在该程序被执行时，这些代码会被装入到该进程的虚拟地址空间中 动态链接：代码被放到动态链接库或共享对象的某个目标文件中，链接程序只是在最终的可执行程序中记录了共享对象的名字等一些信息。在程序执行时，动态链接库的全部内容会被映射到运行时相应进行的虚拟地址空间  内存管理 C++内存分区：栈、堆、全局/静态存储区、常量存储区、代码区
 栈：存放函数的局部变量、函数参数、返回地址等，由编译器自动分配和释放 堆：动态申请的内存空间，就是由malloc/new分配的内存块，有程序员控制它的分配和释放，如果程序执行结束没有释放，操作系统会自动回收 全局/静态存储区（.bss段和.data段）：存放全局变量和静态变量，程序运行结束操作系统自动释放，在C语言中，为初始化的放在.bss段中，初始化的放在.data段中，C++中不再区分 常量存储区（.data段）：存放的是常量，不允许修改，程序运行结束自动释放 代码区（.text段）：存放代码，不允许修改，但可以执行。编译后的二进制文件存放在这里  以上存储区在内容中的分布是如下形式（从低地址到高地址）：.text段 -&amp;gt; .data段 -&amp;gt; 堆 -&amp;gt; unused-&amp;gt; 栈 -&amp;gt; env
栈和堆的区别     栈 堆     申请方式 系统自动分配 程序主动申请   申请后系统响应 分配栈空间，如果剩余空间大于申请空间则分配成功，否则分配失败栈溢出 堆在内存中呈现的方式类似于链表（记录空闲地址空间的链表），在链表上寻找第一个大于申请空间的节点分配给程序，将该结点从链表中删除，大多数系统中该块空间的首地址存放的本次分配空间的大小，便于释放，将该快空间上的剩余空间再次连接在空闲链表上   地址 栈在内存中是连续的一块空间（向低地址扩展） 堆在内存中的空间（向高地址扩展）是不连续的   申请效率 申请效率高 申请效率低，使用起来方便但是容易产生碎片   存放的内容 局部变量，函数的参数 由程序控制    虚表  虚表  内存对齐 内存对齐：编译器将程序中的每个“数据单元”安排在字的整数倍的地址指向的内存之中</description>
    </item>
    
  </channel>
</rss>
