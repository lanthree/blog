<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>数据库 on Engineers Cool</title>
    <link>https://engineers.cool/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/</link>
    <description>Recent content in 数据库 on Engineers Cool</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 02 Feb 2022 19:51:17 +0800</lastBuildDate><atom:link href="https://engineers.cool/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>MySQL事务</title>
      <link>https://engineers.cool/posts/stereotype/database/transaction/</link>
      <pubDate>Wed, 02 Feb 2022 19:51:17 +0800</pubDate>
      
      <guid>https://engineers.cool/posts/stereotype/database/transaction/</guid>
      <description>基于InnoDB
 数据库事务指的是：满足ACID特性的一组操作。
ACID  原子性（Atomicity）：事务被视为不可分割的最小单元，事务的所有操作要么全部提交成功，要么全部失败回滚。  回滚可以用日志实现，日志记录着事务所执行的修改操作，在回滚时反向执行这些修改操作即可。   一致性（Consistency）：数据库在事务执行前后都保持一致性状态。在一致性状态下，所有事务对一个数据库的读结果都是相同的。 隔离性（Isolation）：一个事务所做的修改在最终提交以前，对其他事务是不可见的。 持久性（Durability）：一旦事务提交，则其所做的修改将会永远保存到数据库中，即使系统发生崩溃，事务执行的结果也不能丢失。  可以通过数据库备份和恢复来实现，在系统发生崩溃时，使用备份的数据库进行数据恢复    可以按如下思路理解：
 只有满足一致性，事务的执行结果才是正确的 在无并发的情况下，事务串行执行，隔离型一定能满足。此时只要能满足原子性，就能满足一致性 在并发的情况下，多个事务并行执行，事务不仅要满足原子性，还需要满足隔离性，才能满足一致性 事务满足持久化，是为了能够应对数据库崩溃的情况  并发一致性问题 在并发情况下，不考虑事务的隔离性，会有以下并发一致性问题：
 读脏数据：T1修改了一个数据，T2随后读取这个数据，如果T1撤销了这次修改，T2读取的就是脏数据 不可重复读：T2读取了一个数据，T1对该数据做了修改，如果T2再次读取这个数据，此时读取的结果和第一次读取的结果不同 幻影读：T1读取某个范围的数据，T2在这个范围插入更新的数据，T1再次读取这个范围的数据，此时读取的结果和第一次读取的结果不同  产生并发不一致问题的主要原因，是破坏了事务的隔离性，解决方法是通过并发控制来保证隔离性。并发控制可以通过封锁来实现，但是封锁操作需要用户自己控制，相当复杂。数据库管理系统提供了事务的隔离级别，让用户以一种更轻松的方式处理并发一致性问题。
隔离级别 MySQL支持SQL标准定义的四种隔离级别：
 读未提交（READ UNCOMMITTED）：事务中的修改，即使没有提交，对其它事务也是可见的 读提交（READ COMMITTED）：一个事务只能读取已经提交的事务所做的修改。即，一个事务所做的修改在提交之前对其他事务是不可见的 可重复读（REPEATABLE READ）：保证在同一个事务中多次读取同一个数据的结果是一样的 串性化（SERIALIZABLE）：强制事务串性执行  从上往下，隔离强度逐渐增强，性能逐渐变差。采用哪种隔离级别要根据系统需求权衡决定，其中，可重复读是MySQL的默认级别。
事务隔离就是为了解决上面并发一致性的问题，下面展示了4中隔离级别对这三个问题的解决程度：
   隔离级别 脏读 不可重复读 幻读     读未提交 可能 可能 可能   读提交  可能 可能   可重复读   可能   串性化       修改丢失 如果多个线程操作，基于同一个查询结果对表中的记录进行修改，那么后修改的记录会覆盖前面修改的记录，前面的修改丢失掉了，这就叫丢失更新。</description>
    </item>
    
    <item>
      <title>MySQL锁</title>
      <link>https://engineers.cool/posts/stereotype/database/lock/</link>
      <pubDate>Wed, 02 Feb 2022 19:51:10 +0800</pubDate>
      
      <guid>https://engineers.cool/posts/stereotype/database/lock/</guid>
      <description>锁粒度 MySQL提供了两种封锁粒度：行级锁、表级锁。
应该尽量只锁定需要修改的那部分数据，而不是所有的资源。锁定的数据量越少，发生锁冲突的可能就越少，系统的并发程度就越高。锁的各种操作（包括获取锁、释放锁 以及 检查锁状态）都需要消耗资源。
MySQL不同的存储引擎支持不同的锁机制，所有的存储引擎都以自己的方式实现了锁机制，服务器层完全不了解存储引擎中的锁实现：
 InnoDB存储引擎既支持行级锁（row-level locking），也支持表级锁（table-level locking），但默认情况下采用行级锁。 MyISAM和MEMORY存储引擎采用的是表级锁（table-level locking） BDB存储引擎采用的是页面锁（page-level locking），也支持表级锁  不同粒度锁的比较：
 表级锁：开销小，加锁快；不会出现死锁；锁粒度度大，发生冲突的高度最高，并发度最低。  存储引擎通过 总是一次性同时获取所有需要的锁 以及 总是按相同的顺序获取表锁 来避免死锁。   行级锁：开销大，加锁慢；会出现死锁；锁定粒度最小，发生锁冲突概率最低，并发度也最高。  最大程度的支持并发，同时也带来了最大的锁开销。 在InnoDB中，除单个SQL组成的事物外，锁是逐步获得的，这就决定了在InnoDB中发生死锁是可能的。 行级锁只在存储引擎层实现，而MySQL服务器层没有实现。 行级锁更适合于有大量索引条件并发更新少量不同数据，同时又有并发查询的应用，如一些在线事务处理（OLTP）系统。   页面锁：开销和加锁时间介于表锁和行锁之间；会出现死锁；锁定粒度介于表锁和行锁之间，并发度一般。  锁类型  基于InnoDB
  共享锁（读锁，S）：其他事务可以读，但不能写。  一个事务对数据对象A加了S锁，可以对A进行读操作，但是不能进行更新操作。加锁期间其他事务能对A加S锁，但是不能加X锁。   排他锁（写锁，X）：其他事务不能读，也不能写。  一个事务对数据对象A加了X锁，就可以对A进行读取和更新操作。加锁期间其他事务不能对A加任务锁。    为了允许行锁和表锁共存，实现多粒度锁机制，InnoDB还有两种内部使用的意向锁（Intention Locks）：意向共享锁（IS）、意向排他锁（IX）。IS/IX都是表锁，用来表示一个事务想要在表中的某个数据行上加S锁或X锁。有以下两个规定：
 一个事务在获得某个数据行对象的S锁之前，必须先获得表的IS锁或更强的锁 一个事务在获得某个数据行对象的X锁之前，必须先获得表的IX锁  通过引入意向锁，事务T想要对表A加X锁，只需要检测是否有其他事务对表A加了X/IX/IS锁，后两者标识有其他使用给该表中的某行加了X/S锁。
锁的兼容关系
   锁 X IX S IS     X       IX  Y  Y   S   Y Y   IS  Y Y Y     任意IS/IX锁之间都是兼容的，他们只表示想要加锁，而不是真正加锁 S锁只有S锁和IS锁兼容，也就是说事务T想要对数据行加S锁，其他事务可以获得对表或者表中行的S锁  隐式与显示锁定 MySQL的InnoDB存储引擎采用两段锁协议（加锁和解锁分为两个阶段进行），会根据隔离级别在需要的时候自动加锁，并且所有的锁都是在同时时刻被释放，这被称为隐式锁定。</description>
    </item>
    
  </channel>
</rss>
